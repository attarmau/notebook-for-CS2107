from pgmpy.models import BayesianModel
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination

# Step 1: Define the Network Structure
model = BayesianModel([('F', 'R'), ('M', 'R'), ('R', 'B'), ('S', 'C'), ('R', 'C'), ('S', 'Y')])

# Step 2: Specify Conditional Probability Distributions (CPDs)
cpd_F = TabularCPD(variable='F', variable_card=2, values=[[0.99], [0.01]])
cpd_M = TabularCPD(variable='M', variable_card=2, values=[[0.001], [0.999]])
cpd_R = TabularCPD(variable='R', variable_card=2,
                   values=[[0.99, 0.8, 0.7, 0.5],    # F=0, M=0
                           [0.01, 0.2, 0.3, 0.5]],   # F=1, M=1
                   evidence=['F', 'M'], evidence_card=[2, 2])
cpd_B = TabularCPD(variable='B', variable_card=2,
                   values=[[0.99, 0.89],  # R=0
                           [0.01, 0.11]],  # R=1
                   evidence=['R'], evidence_card=[2])
cpd_S = TabularCPD(variable='S', variable_card=2, values=[[0.9], [0.1]])
cpd_Y = TabularCPD(variable='Y', variable_card=2,
                   values=[[0.95, 0.05],  # S=0
                           [0.05, 0.95]],  # S=1
                   evidence=['S'], evidence_card=[2])
cpd_C = TabularCPD(variable='C', variable_card=2,
                   values=[[0.9, 0.4, 0.8, 0.1],    # S=0, R=0
                           [0.1, 0.6, 0.2, 0.9]],
                   evidence=['S', 'R'], evidence_card=[2, 2])
# Step 3: Create the Bayesian Network
model.add_cpds(cpd_F, cpd_M, cpd_R, cpd_B, cpd_S, cpd_Y, cpd_C)

# Step 4: Calculating Inference
inference = VariableElimination(model) # Create an instance of VariableElimination for performing inference
prob_C_given_B1 = inference.query(variables=['C'], evidence={'B': 1}) # Compute the probability distribution of C given evidence that B=1
prob_C0_given_B1 = prob_C_given_B1.values[0] # Extract the probability of C=0 from the computed distribution
print("Probability of C=0 given B=1:", prob_C0_given_B1)
